ARRAYS:
Array is a linear data structure that stores a collection of elements of the same data type. 
Each element has a unique index number.

Arrays in C#.
1. All arrays are dynamically allocated.
2. A C# array variable can also be declared like other variables with [] after the data type. 
3. The variables in the array are ordered and each has an index beginning from 0.
4. C# array is an object of base type System.Array.

As said earlier, an array is a reference type so the new keyword used to create an instance of the array. We can assign initialize individual array elements, with the help of the index. Syntax :

type [ ] < Name_Array > = new < datatype > [size];
Here, type specifies the type of data being allocated, size specifies the number of elements in the array, and Name_Array is the name of an array variable. And new will allocate memory to an array according to its size. Examples : To Show Different ways for the Array Declaration and Initialization  Example 1 :

// defining array with size 5. 
// But not assigns values
int[] intArray1 = new int[5]; 
The above statement declares & initializes int type array that can store five int values. The array size is specified in square brackets([]). Example 2 :

// defining array with size 5 and assigning
// values at the same time
int[] intArray2 = new int[5]{1, 2, 3, 4, 5};
The above statement is the same as, but it assigns values to each index in {}. Example 3 :

// defining array with 5 elements which 
// indicates the size of an array
int[] intArray3 = {1, 2, 3, 4, 5};

Types of Arrays

One Dimensional Array

In this array contains only one row for storing the values. All values of this array are stored contiguously starting from 0 to the array size. For example, declaring a single-dimensional array of 5 integers :

int[] arrayint = new int[5];

Multidimensional Arrays

The multi-dimensional array contains more than one row to store the values. It is also known as a Rectangular Array in C# because it’s each row length is same. It can be a 2D-array or 3D-array or more. To storing and accessing the values of the array, one required the nested loop. The multi-dimensional array declaration, initialization and accessing is as follows :

// creates a two-dimensional array of 
// four rows and two columns.
int[, ] intarray = new int[4, 2];

//creates an array of three dimensions, 4, 2, and 3
int[,, ] intarray1 = new int[4, 2, 3];

Jagged Arrays

An array whose elements are arrays is known as Jagged arrays it means “array of arrays“. The jagged array elements may be of different dimensions and sizes. Below are the examples to show how to declare, initialize, and access the jagged arrays. 


BASIC PROBLEMS ON ARRAY.

1. Print Alternates.

Examples: Given an array arr[], the task is to print every alternate element of the array starting from the first element.

Examples:

Input: arr[] = [10, 20, 30, 40, 50]
Output: 10 30 50
Explanation: Print the first element (10), skip the second element (20), print the third element (30), skip the fourth element(40) and print the fifth element(50).


Input: arr[] = [-5, 1, 4, 2, 12]
Output: -5 4 12


ITERATIVE APPROACH.
The idea is to start iterating from index 0, print the element at that index, and then increment the index by 2 to move to the next alternate element. Keep on printing the elements till we reach the end of the array.

// Iterate C# Program to print alternate elements
// of the array

using System;
using System.Collections.Generic;

class GfG {
    static List<int> getAlternates(int[] arr) {
        List<int> res = new List<int>();
      
        // Iterate over all alternate elements
        for (int i = 0; i < arr.Length; i += 2) {
            res.Add(arr[i]);
        }
        return res;
    }

    static void Main() {
        int[] arr = { 10, 20, 30, 40, 50 };
        List<int> res = getAlternates(arr);
        foreach (int x in res) {
            Console.Write(x + " ");
        }
    }
}



//JAVASCRIPT
// Iterate JavaScript Program to print alternate elements
// of the array

function getAlternates(arr) {
    let res = [];
    
    // Iterate over all alternate elements
    for (let i = 0; i < arr.length; i += 2) {
        res.push(arr[i]);
    }
    return res;
}


// Driver Code
const arr = [10, 20, 30, 40, 50];
const res = getAlternates(arr);
console.log(res.join(" "));


Recursive approach
// Recursive C# Program to print alternate elements
// of the array

using System;
using System.Collections.Generic;

class GfG {
    
    // Recursive function to store all alternate elements
    static void getAlternatesRec(int[] arr, int idx, 
                                     List<int> res) {
        if (idx < arr.Length) {
            res.Add(arr[idx]);
            getAlternatesRec(arr, idx + 2, res);
        }
    }

    static List<int> getAlternates(int[] arr) {
        List<int> res = new List<int>();
        getAlternatesRec(arr, 0, res);
        return res;
    }

    static void Main() {
        int[] arr = { 10, 20, 30, 40, 50 };
        List<int> res = getAlternates(arr);
        foreach (int x in res) {
            Console.Write(x + " ");
        }
    }
}


2. LINEAR SEARCH ALGORITHM
Given an array, arr of n integers, and an integer element x, find whether element x is present in the array. Return the index of the first occurrence of x in the array, or -1 if it doesn’t exist.

Input: arr[] = [1, 2, 3, 4], x = 3
Output: 2
Explanation: There is one test case with array as [1, 2, 3 4] and element to be searched as 3. Since 3 is present at index 2, the output is 2.


Input: arr[] = [10, 8, 30, 4, 5], x = 5
Output: 4
Explanation: For array [1, 2, 3, 4, 5], the element to be searched is 5 and it is at index 4. So, the output is 4.


Input: arr[] = [10, 8, 30], x = 6
Output: -1
Explanation: The element to be searched is 6 and its not present, so we return -1.

In Linear Search, we iterate over all the elements of the array and check if it the current element is equal to the target element. If we find any element to be equal to the target element, then return the index of the current element. Otherwise, if no element is equal to the target element, then return -1 as the element is not found. Linear search is also known as sequential search.

For example: Consider the array arr[] = {10, 50, 30, 70, 80, 20, 90, 40} and key = 30

using System;

class GFG {
    public static int search(int[] arr, int N, int x)
    {
        for (int i = 0; i < N; i++) {
            if (arr[i] == x)
                return i;
        }
        return -1;
    }

    // Driver's code
    public static void Main()
    {
        int[] arr = { 2, 3, 4, 10, 40 };
        int x = 10;

        // Function call
        int result = search(arr, arr.Length, x);
        if (result == -1)
            Console.WriteLine(
                "Element is not present in array");
        else
            Console.WriteLine("Element is present at index "
                              + result);
    }
}



JAVASCRIPT CODE
// Javascript code to linearly search x in arr[].

function search(arr, n, x)
{
    for (let i = 0; i < n; i++)
        if (arr[i] == x)
            return i;
    return -1;
}

// Driver code

    let arr = [ 2, 3, 4, 10, 40 ];
    let x = 10;
    let n = arr.length;

    // Function call
    let result = search(arr, n, x);
    (result == -1)
        ? console.log("Element is not present in array")
        : console.log("Element is present at index " + result);





Question: Linear Search in an Array
Write a C# program to search for a specific number in an array of integers. The program should meet the following requirements:

Input:

An array of integers: {5, 12, 8, 19, 27, 3, 15, 8}
A number to search for (e.g., 8).
Output:

If the number is found in the array, print all the indices where it occurs (since it might appear more than once).
If the number is not found, print a message saying, "Number not found in the array."
Bonus Task:

Count how many times the number appears in the array and display this count.


Applications of Linear Search Algorithm:
Unsorted Lists: When we have an unsorted array or list, linear search is most commonly used to find any element in the collection.
Small Data Sets: Linear Search is preferred over binary search when we have small data sets with
Searching Linked Lists: In linked list implementations, linear search is commonly used to find elements within the list. Each node is checked sequentially until the desired element is found.
Simple Implementation: Linear Search is much easier to understand and implement as compared to Binary Search or Ternary Search.
Advantages of Linear Search Algorithm:
Linear search can be used irrespective of whether the array is sorted or not. It can be used on arrays of any data type.
Does not require any additional memory.
It is a well-suited algorithm for small datasets.
Disadvantages of Linear Search Algorithm:
Linear search has a time complexity of O(N), which in turn makes it slow for large datasets.
Not suitable for large arrays.
When to use Linear Search Algorithm?
When we are dealing with a small dataset.
When you are searching for a dataset stored in contiguous memory.

3. LARGEST ELEMENT IN AN ARRAY

Given an array arr. The task is to find the largest element in the given array. 

Examples: 

Input: arr[] = [10, 20, 4]
Output: 20
Explanation: Among 10, 20 and 4, 20 is the largest. 


Input: arr[] = [20, 10, 20, 4, 100]
Output: 100


Iterative Approach – O(n) Time and O(1) Space
The approach to solve this problem is to traverse the whole array and find the maximum among them.

Meaning of Travserse: Journey Through


C# CODE
using System;
using System.Collections.Generic;

class GfG {
    static int Largest(List<int> arr) {
        int max = arr[0];

        // Traverse from second and compare
        // every element with current max
        for (int i = 1; i < arr.Count; i++)
            if (arr[i] > max)
                max = arr[i];

        return max;
    }

    static void Main() {
        List<int> arr = new List<int> { 10, 324, 45, 90, 9808 };
        Console.WriteLine(Largest(arr));
    }
}

Javascript Code:
function largest(arr) {
    let max = arr[0];

    // Traverse from second and compare
    // every element with current max
    for (let i = 1; i < arr.length; i++)
        if (arr[i] > max)
            max = arr[i];

    return max;
}

// Driver Code
const arr = [10, 324, 45, 90, 9808];
console.log(largest(arr));


What Would Happen if We Started from the First Element?
If the loop started from i = 0:

csharp
Copy code
for (int i = 0; i < arr.Count; i++)
    if (arr[i] > max)
        max = arr[i];
The first iteration would compare arr[0] with max (which is also arr[0] initially).
Since arr[0] is equal to max, the value of max would remain unchanged.
The program would still work correctly, but the first comparison is unnecessary and adds a tiny bit of inefficiency.
Why This Approach is Better
By starting from the second element (i = 1):

We save one unnecessary comparison.
The code is cleaner because the first element is already accounted for.


LIBRARY METHOD APPROACH(THE MOST SIMPLEST APPROACH)
Most of the languages have a relevant max() type in-built function to find the maximum element, such as  std::max_element in C++. We can use this function to directly find the maximum element.  

C# CODE
using System;
using System.Linq;
using System.Collections.Generic;

class GfG {
  static int largest(List<int> arr) {
          return arr.Max();
      }
  
    static public void Main() {
         List<int> arr = new List<int> { 10, 324, 45, 90, 9808 };
        Console.WriteLine(largest(arr));
    }
}

Javascript CODE
// Function to find the largest number in an array
function largest(arr) {
    return Math.max(...arr);
}

// Driver Code
const arr = [10, 324, 45, 90, 9808];
console.log(largest(arr));

Bonus Challenge

Write a C# program to find the largest element in an array of integers. However, the array may include negative numbers, duplicates, and could have varying lengths.

Additionally:

If the array is empty, your program should print a message like: "The array is empty. No largest element found."
If the array has only one element, that element should be considered the largest.
Test your program with multiple test cases to handle edge cases like:
Arrays with all negative numbers.
Arrays with duplicate largest elements.
Arrays with a single element.
Empty arrays.
Input:
An array of integers (e.g., { -10, 0, 15, -20, 15 }).

Output:
The largest element in the array, or an appropriate message if the array is empty.

Sample Test Cases:
Test Case 1:
Input:
int[] arr = { -10, 0, 15, -20, 15 };
Output:
The largest element is: 15


4.Second Largest Element in an Array

Given an array of positive integers arr[] of size n, the task is to find second largest distinct element in the array.

Note: If the second largest element does not exist, return -1.

Examples:

Input: arr[] = [12, 35, 1, 10, 34, 1]
Output: 34
Explanation: The largest element of the array is 35 and the second largest element is 34.


Input: arr[] = [10, 5, 10]
Output: 5
Explanation: The largest element of the array is 10 and the second largest element is 5.


Input: arr[] = [10, 10, 10]
Output: -1
Explanation: The largest element of the array is 10 there is no second largest element.

//PROBLEM AND SOLUTION

[Expected Approach] One Pass Search – O(n) Time and O(1) Space
The idea is to keep track of the largest and second largest element while traversing the array. Initialize largest and second largest with -1. Now, for any index i,


If arr[i] > largest, update second largest with largest and largest with arr[i].
Else If arr[i] < largest and arr[i] > second largest, update second largest with arr[i]. 

C# SOLUTION

using System;
using System.Collections.Generic;

class Program
{
    // Function to return three largest elements
    public static List<int> Get3Largest(int[] arr)
    {
        int fst = int.MinValue, sec = int.MinValue, thd = int.MinValue;

        foreach (int x in arr)
        {
            // If current element is greater than fst
            if (x > fst)
            {
                thd = sec;
                sec = fst;
                fst = x;
            }
            // If x is between fst and sec
            else if (x > sec && x != fst)
            {
                thd = sec;
                sec = x;
            }
            // If x is between sec and thd
            else if (x > thd && x != sec && x != fst)
                thd = x;
        }

        List<int> res = new List<int>();
        if (fst == int.MinValue) return res;
        res.Add(fst);
        if (sec == int.MinValue) return res;
        res.Add(sec);
        if (thd == int.MinValue) return res;
        res.Add(thd);

        return res;
    }

    static void Main()
    {
        int[] arr = {12, 13, 1, 10, 34, 1};
        List<int> res = Get3Largest(arr);
        foreach (int x in res)
            Console.Write(x + " ");
        Console.WriteLine();
    }
}

JAVASCRIPT SOLUTION

function get3largest(arr) {
    let fst = -Infinity, sec = -Infinity, thd = -Infinity;

    arr.forEach(x => {
        // If current element is greater than fst
        if (x > fst) {
            thd = sec;
            sec = fst;
            fst = x;
        }
        // If x is between fst and sec
        else if (x > sec && x !== fst) {
            thd = sec;
            sec = x;
        }
        // If x is between sec and thd
        else if (x > thd && x !== sec && x !== fst) {
            thd = x;
        }
    });

    let res = [];
    if (fst !== -Infinity) res.push(fst);
    if (sec !== -Infinity) res.push(sec);
    if (thd !== -Infinity) res.push(thd);

    return res;
}

// Driver code
let arr = [12, 13, 1, 10, 34, 1];
let res = get3largest(arr);
console.log(res.join(' '));


5. LARGEST THREE DISTINCTS ELEMENTS IN AN ARRAY

Given an array arr[], the task is to find the top three largest distinct integers present in the array.

Note: If there are less than three distinct elements in the array, then return the available distinct numbers in descending order.

Examples :

Input: arr[] = [10, 4, 3, 50, 23, 90]
Output: [90, 50, 23]


Input: arr[] = [10, 9, 9]
Output: [10, 9]
There are only two distinct elements


Input: arr[] = [10, 10, 10]
Output: [10]
There is only one distinct element


Input: arr[] = []
Output: []

PROBLEM AND SOLUTION:

Efficient Solution – One Traversal
Initialize first, second and third largest elements as -INF (minus infinite). Traverse through the array and handle the following cases for every element x.

If x is greater than first, update first as x, second as first and third as second.
Else If x is greater than second and not equal to first, update second as x and third as second
Else If x is greater third and not equal to first and second, update, third as x.


C# EXAMPLE:
using System;
using System.Collections.Generic;

class Program
{
    // Function to return three largest elements
    public static List<int> Get3Largest(int[] arr)
    {
        int fst = int.MinValue, sec = int.MinValue, thd = int.MinValue;

        foreach (int x in arr)
        {
            // If current element is greater than fst
            if (x > fst)
            {
                thd = sec;
                sec = fst;
                fst = x;
            }
            // If x is between fst and sec
            else if (x > sec && x != fst)
            {
                thd = sec;
                sec = x;
            }
            // If x is between sec and thd
            else if (x > thd && x != sec && x != fst)
                thd = x;
        }

        List<int> res = new List<int>();
        if (fst == int.MinValue) return res;
        res.Add(fst);
        if (sec == int.MinValue) return res;
        res.Add(sec);
        if (thd == int.MinValue) return res;
        res.Add(thd);

        return res;
    }

    static void Main()
    {
        int[] arr = {12, 13, 1, 10, 34, 1};
        List<int> res = Get3Largest(arr);
        foreach (int x in res)
            Console.Write(x + " ");
        Console.WriteLine();
    }
}

JAVASCRIPT
function get3largest(arr) {
    let fst = -Infinity, sec = -Infinity, thd = -Infinity;

    arr.forEach(x => {
        // If current element is greater than fst
        if (x > fst) {
            thd = sec;
            sec = fst;
            fst = x;
        }
        // If x is between fst and sec
        else if (x > sec && x !== fst) {
            thd = sec;
            sec = x;
        }
        // If x is between sec and thd
        else if (x > thd && x !== sec && x !== fst) {
            thd = x;
        }
    });

    let res = [];
    if (fst !== -Infinity) res.push(fst);
    if (sec !== -Infinity) res.push(sec);
    if (thd !== -Infinity) res.push(thd);

    return res;
}

// Driver code
let arr = [12, 13, 1, 10, 34, 1];
let res = get3largest(arr);
console.log(res.join(' '));


6. LEADERS IN AN ARRAY

Given an array arr[] of size n, the task is to find all the Leaders in the array. An element is a Leader if it is greater than or equal to all the elements to its right side.

Note: The rightmost element is always a leader.

Examples:

Input: arr[] = [16, 17, 4, 3, 5, 2]
Output: [17 5 2]
Explanation: 17 is greater than all the elements to its right i.e., [4, 3, 5, 2], therefore 17 is a leader. 5 is greater than all the elements to its right i.e., [2], therefore 5 is a leader. 2 has no element to its right, therefore 2 is a leader.


Input: arr[] = [1, 2, 3, 4, 5, 2]
Output: [5 2]
Explanation: 5 is greater than all the elements to its right i.e., [2], therefore 5 is a leader. 2 has no element to its right, therefore 2 is a leader.




SOLUTION : EXPECTED APPROACH - USING SUFFIX MAXIMUM

The idea is to scan all the elements from right to left in an array and keep track of the maximum till now. When the maximum changes its value, add it to the result. Finally reverse the result 

C#

using System;
using System.Collections.Generic;

class GfG {
  
    // Function to find the leaders in an array
    static List<int> Leaders(int[] arr){
        List<int> result = new List<int>();
        int n = arr.Length;

        // Start with the rightmost element
        int maxRight = arr[n - 1];

        // Rightmost element is always a leader
        result.Add(maxRight);

        // Traverse the array from right to left
        for (int i = n - 2; i >= 0; i--) {
            if (arr[i] >= maxRight) {
                maxRight = arr[i];
                result.Add(maxRight);
            }
        }

        // Reverse the result list to maintain original
        // order
        result.Reverse();

        return result;
    }

    static void Main(){
        int[] arr = { 16, 17, 4, 3, 5, 2 };
        List<int> result = Leaders(arr);

        foreach(int res in result){
            Console.Write(res + " ");
        }
        Console.WriteLine();
    }
}

JAVASCRIPT
// Function to find the leaders in an array
function leaders(arr)
{
    const result = [];
    const n = arr.length;

    // Start with the rightmost element
    let maxRight = arr[n - 1];

    // Rightmost element is always a leader
    result.push(maxRight);

    // Traverse the array from right to left
    for (let i = n - 2; i >= 0; i--) {
        if (arr[i] >= maxRight) {
            maxRight = arr[i];
            result.push(maxRight);
        }
    }

    // Reverse the result array to maintain
    // original order
    result.reverse();

    return result;
}

// Driver code
const arr = [ 16, 17, 4, 3, 5, 2 ];
const result = leaders(arr);
console.log(result.join(" "));


7. CHECK IF AN ARRAY IS SORTED
Given an array of size n, the task is to check if it is sorted in ascending order or not. Equal values are allowed in an array and two consecutive equal values are considered sorted.

Examples: 

Input: arr[] = [20, 21, 45, 89, 89, 90]
Output: Yes

Input: arr[] = [20, 20, 45, 89, 89, 90]
Output: Yes

Input: arr[] = [20, 20, 78, 98, 99, 97]
Output: No

C#
// Recursive approach to check if an
// Array is sorted or not
using System;

class GFG
{

    // Function that returns true if array is
    // sorted in non-decreasing order.
    static bool arraySortedOrNot(int []arr, int n)
    {

        // Array has one or no element
        if (n == 0 || n == 1)
            return true;

        for (int i = 1; i < n; i++)

            // Unsorted pair found
            if (arr[i - 1] > arr[i])
                return false;

        // No unsorted pair found
        return true;
    }

    // Driver code
    public static void Main(String[] args)
    {
        int []arr = { 20, 23, 23, 45, 78, 88 };
        int n = arr.Length;

        if (arraySortedOrNot(arr, n))
            Console.Write("Yes\n");
        else
            Console.Write("No\n");
    }
}

Javascript

// JavaScript program Iterative approach to check if an
// Array is sorted or not

// Function that returns true if array is
// sorted in non-decreasing order.
function arraySortedOrNot(arr, n) 

    // Array has one or no element
    if (n === 0 || n === 1) {
        return true;
    }

    for (let i = 1; i < n; i++) {
        // Unsorted pair found
        if (arr[i - 1] > arr[i]) {
            return false;
        }
    }

    // No unsorted pair found
    return true;
}

// Driver Code
let arr = [20, 23, 23, 45, 78, 88];
let n = arr.length;

if (arraySortedOrNot(arr, n)) {
    console.log("Yes");
} else {
    console.log("No");
}

8. REMOVE DUPLICATES FROM SORTED

Given a sorted array arr[] of size n, the goal is to rearrange the array so that all distinct elements appear at the beginning in sorted order. Additionally, return the length of this distinct sorted subarray.

Note: The elements after the distinct ones can be in any order and hold any value, as they don’t affect the result.

Examples: 

Input: arr[] = [2, 2, 2, 2, 2]
Output: [2]
Explanation: All the elements are 2, So only keep one instance of 2.


Input: arr[] = [1, 2, 2, 3, 4, 4, 4, 5, 5]
Output: [1, 2, 3, 4, 5]

Input: arr[] = [1, 2, 3]
Output: [1, 2, 3]
Explanation : No change as all elements are distinct.

C# SOLUTION

using System;

class GfG {
    static int removeDuplicates(int[] arr) {
        int n = arr.Length;
        if (n <= 1)
            return n;
        
          // Start from the second element
        int idx = 1; 
        for (int i = 1; i < n; i++) {
            if (arr[i] != arr[i - 1]) {
                arr[idx++] = arr[i];
            }
        }
        return idx;
    }

    static void Main() {
        int[] arr = {1, 2, 2, 3, 4, 4, 4, 5, 5};
        int newSize = removeDuplicates(arr);

        for (int i = 0; i < newSize; i++) {
            Console.Write(arr[i] + " ");
        }
    }
}

Javascript Solution

function removeDuplicates(arr) {
    const n = arr.length;
    if (n <= 1)
        return n;
    
    // Start from the second element
    let idx = 1; 
    for (let i = 1; i < n; i++) {
        if (arr[i] !== arr[i - 1]) {
            arr[idx++] = arr[i];
        }
    }

    return idx;
}

// Driver code
const arr = [1, 2, 2, 3, 4, 4, 4, 5, 5];
const newSize = removeDuplicates(arr);

console.log(arr.slice(0, newSize).join(' '));



9. Generating all subarrays.
 Given an array arr[], the task is to generate all the possible subarrays of the given array.

Examples: 

Input: arr[] = [1, 2, 3]
Output: [ [1], [1, 2], [2], [1, 2, 3], [2, 3], [3] ]

Input: arr[] = [1, 2]
Output: [ [1], [1, 2], [2] ]

Iterative Approach
To generate a subarray, we need a starting index from the original array. For choosing the starting index, we can run a loop from [0 to n-1] and consider each i as the starting index. For each starting index i, we can select an ending index from the range [i to n-1]. A nested loop from [i to n-1] will help in selecting the ending index. Once we have the starting and ending indices, we need an innermost loop to print the elements in this subarray.

Outermost Loop: Picks starting index of current subarray
Middle Loop: Picks ending index of current subarray
Innermost Loop: Prints the subarray from the starting index to the ending index

C# CODE
using System;
using System.Collections.Generic;

class GfG {
  
      //Prints all subarrays in arr[0..n-1]
    static void SubArray(List<int> arr) {
        int n = arr.Count;

        // Pick starting point
        for (int i = 0; i < n; i++) {
          
            // Pick ending point
            for (int j = i; j < n; j++) {
              
                // Print subarray between current starting and ending points
                for (int k = i; k <= j; k++) {
                    Console.Write(arr[k] + " ");
                }
                Console.WriteLine();
            }
        }
    }

    static void Main() {
        List<int> arr = new List<int> { 1, 2, 3, 4 };
        Console.WriteLine("All Non-empty Subarrays:");
        SubArray(arr);
    }
}
 

JAVASCRIPT CODE
//Prints all subarrays in arr[0..n-1]
function subArray(arr) {
    const n = arr.length;

    // Pick starting point
    for (let i = 0; i < n; i++) {
    
        // Pick ending point
        for (let j = i; j < n; j++) {
        
            // Print subarray between current starting and ending points
            let subarr = [];
            for (let k = i; k <= j; k++) {
                subarr.push(arr[k]);
            }
            console.log(subarr.join(" "));
        }
    }
}

const arr = [1, 2, 3, 4];
console.log("All Non-empty Subarrays:");
subArray(arr);

10. Array Reverse
Given an array arr[], the task is to reverse the array. Reversing an array means rearranging the elements such that the first element becomes the last, the second element becomes second last and so on.

Examples:

Input: arr[] = {1, 4, 3, 2, 6, 5}  
Output: {5, 6, 2, 3, 4, 1}
Explanation: The first element 1 moves to last position, the second element 4 moves to second-last and so on.


Input: arr[] = {4, 5, 1, 2} 
Output: {2, 1, 5, 4}
Explanation: The first element 4 moves to last position, the second element 5 moves to second last and so on.

C# CODE

// C# Program to reverse an array using Two Pointers

using System;

class GfG {
  
    // function to reverse an array
    static void reverseArray(int[] arr) {
      
        // Initialize left to the beginning and right to the end
        int left = 0, right = arr.Length - 1;

        // Iterate till left is less than right
        while (left < right) {
          
            // Swap the elements at left and right position
            int temp = arr[left];
            arr[left] = arr[right];
            arr[right] = temp;

            // Increment the left pointer
            left++;

            // Decrement the right pointer
            right--;
        }
    }

    static void Main() {
        int[] arr = { 1, 4, 3, 2, 6, 5 };

        reverseArray(arr);

        for (int i = 0; i < arr.Length; i++)
            Console.Write(arr[i] + " ");
    }
}







